@using AutoRest.Go
@using AutoRest.Core.ClientModel
@using AutoRest.Go.Templates
@using AutoRest.Go.TemplateModels
@using AutoRest.Core.Utilities
@using System.Linq

@inherits AutoRest.Go.Template<AutoRest.Go.TemplateModels.ServiceClientTemplateModel>
@{
    var imports = Model.Imports;
    var modelName = GoCodeNamer.CamelCase(Model.Name);
}
@WrapComment("// ", Model.Documentation)
package @Model.PackageName
@EmptyLine
@Header("// ")

@EmptyLine
import (
@foreach (var import in imports)
{
    @:"@(import)"
}
)

@EmptyLine
const (
    // APIVersion is the version of the @(Model.ServiceName)
    APIVersion = "@Model.ApiVersion"
    @EmptyLine
    // DefaultBaseURI is the default URI used for the service @(Model.ServiceName)
    DefaultBaseURI = "@Model.BaseUrl"
)

@EmptyLine
@WrapComment("// ", Model.ClientDocumentation)
type @(Model.ClientName) struct {
    autorest.Client
    BaseURI string
    APIVersion string
    @foreach (var p in Model.Properties)
    {
    if (!p.SerializedName.IsApiVersion())
    {
    @:@(string.Format((p.IsRequired || p.Type.CanBeEmpty()
                                    ? "{0} {1}": "{0} *{1}"),
                                    p.Name, p.Type.Name))
    }
    }
}

@EmptyLine
@WrapComment("// ", string.Format("New creates an instance of the {0} client.", Model.ClientName))
func @(Model.UpdateNameIfDuplicate("New", Model.PackageName))(@(Model.GlobalParameters)) @(Model.ClientName) {
    return NewWithBaseURI(DefaultBaseURI, @(Model.HelperGlobalParameters))
}

@EmptyLine
@WrapComment("// ", string.Format("NewWithBaseURI creates an instance of the {0} client.", Model.ClientName))
func NewWithBaseURI(baseURI string, @(Model.GlobalParameters)) @(Model.ClientName) {
   return @(Model.ClientName){
        Client: autorest.NewClientWithUserAgent(@(Model.UpdateNameIfDuplicate("UserAgent",Model.PackageName))()),
        BaseURI: baseURI,
        APIVersion: APIVersion,
        @foreach (var p in Model.Properties)
        {
        if (!p.SerializedName.IsApiVersion())
        {
        @:@(string.Format("{0}: {1},", p.Name, p.Name.ToSentence()))
        }
        }
    }
}

@EmptyLine
@foreach (var method in Model.MethodTemplateModels)
{
@:@(Include<MethodTemplate, MethodTemplateModel>(new MethodTemplate(), method))
@:@EmptyLine
}
