@using System.Linq;
@using AutoRest.Core.ClientModel
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.TypeModels
@inherits AutoRest.Core.Template<AutoRest.Java.TemplateModels.MethodTemplateModel>
@if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
<text>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.Type.ToString() + " value" : param.Documentation).EscapeXmlComment().Trim())
}
@foreach (var exception in Model.ExceptionStatements)
{
@: * @@throws @exception
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeModel.BodyClientType.Name.EscapeXmlComment() object wrapped in {@@link @Model.ReturnTypeModel.ClientResponseType} if successful.
}
else
{
@: * @@return the {@@link @Model.ReturnTypeModel.ClientResponseType} object if successful.
}
 */
public @Model.ReturnTypeModel.ClientResponseTypeString @(Model.Name)(@Model.MethodRequiredParameterDeclaration) throws @Model.ExceptionString {
    return @(Model.Name)Async(@Model.MethodRequiredParameterInvocation).toBlocking().single();
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.Type.ToString() + " value" : param.Documentation).EscapeXmlComment().Trim())
}
@Model.CallbackDocumentation
 * @@return the {@@link ServiceCall} object
 */
public ServiceCall<@Model.ReturnTypeModel.ServiceCallGenericParameterString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclarationWithCallback) {
    return ServiceCall.@(Model.ServiceCallFactoryMethod)(@(Model.Name)Async(@Model.MethodRequiredParameterInvocation), serviceCallback);
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.Type.ToString() + " value" : param.Documentation).EscapeXmlComment().Trim())
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeModel.BodyClientType.Name.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.ReturnTypeModel.ClientResponseType} object if successful.
}
 */
public Observable<@Model.ReturnTypeModel.ClientResponseTypeString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclaration) {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate.Where(p => p.IsRequired))
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (!parameter.IsRequired)
    {
@:    final @(parameter.ClientType.Name) @(parameter.Name) = @(parameter.ClientType.DefaultValue(Model));
    }
    if (parameter.IsConstant)
    {
@:    final @(parameter.ClientType.ParameterVariant) @(parameter.Name) = @(parameter.DefaultValue);

    }
}
    @Model.BuildInputMappings(true)

@if (Model.IsParameterizedHost)
{
@:    String parameterizedHost = Joiner.on(", ").join(@Model.HostParameterReplacementArgs);
}
    @Model.ParameterConversion
    return service.@(Model.Name)(@Model.MethodRequiredParameterApiInvocation)
        .flatMap(new Func1<Response<@Model.CallType>, Observable<@(Model.ReturnTypeModel.ClientResponseTypeString)>>() {
            @@Override
            public Observable<@(Model.ReturnTypeModel.ClientResponseTypeString)> call(Response<@Model.CallType> response) {
                try {
                    @Model.ClientResponse()
                    return Observable.just(clientResponse);
                } catch (Throwable t) {
                    return Observable.error(t);
                }
            }
        });
}
@EmptyLine
</text>
}
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.Type.ToString() + " value" : param.Documentation).EscapeXmlComment().Trim())
}
@foreach (var exception in Model.ExceptionStatements)
{
@: * @@throws @exception
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeModel.BodyClientType.Name.EscapeXmlComment() object wrapped in {@@link @Model.ReturnTypeModel.ClientResponseType} if successful.
}
else
{
@: * @@return the {@@link @Model.ReturnTypeModel.ClientResponseType} object if successful.
}
 */
public @Model.ReturnTypeModel.ClientResponseTypeString @(Model.Name)(@Model.MethodParameterDeclaration) throws @Model.ExceptionString {
    return @(Model.Name)Async(@Model.MethodParameterInvocation).toBlocking().single();
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.Type.ToString() + " value" : param.Documentation).EscapeXmlComment().Trim())
}
@Model.CallbackDocumentation
 * @@return the {@@link ServiceCall} object
 */
public ServiceCall<@Model.ReturnTypeModel.ServiceCallGenericParameterString> @(Model.Name)Async(@Model.MethodParameterDeclarationWithCallback) {
    return ServiceCall.@(Model.ServiceCallFactoryMethod)(@(Model.Name)Async(@Model.MethodParameterInvocation), serviceCallback);
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.Type.ToString() + " value" : param.Documentation).EscapeXmlComment().Trim())
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeModel.BodyClientType.Name.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.ReturnTypeModel.ClientResponseType} object if successful.
}
 */
public Observable<@Model.ReturnTypeModel.ClientResponseTypeString> @(Model.Name)Async(@Model.MethodParameterDeclaration) {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate)
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (parameter.IsConstant)
    {
@:    final @(parameter.Type.Name) @(parameter.Name) = @(parameter.DefaultValue);
    }
}
    @Model.BuildInputMappings()

@if (Model.IsParameterizedHost)
{
@:    String parameterizedHost = Joiner.on(", ").join(@Model.HostParameterReplacementArgs);
}
    @Model.ParameterConversion
    return service.@(Model.Name)(@Model.MethodParameterApiInvocation)
        .flatMap(new Func1<Response<@Model.CallType>, Observable<@(Model.ReturnTypeModel.ClientResponseTypeString)>>() {
            @@Override
            public Observable<@(Model.ReturnTypeModel.ClientResponseTypeString)> call(Response<@Model.CallType> response) {
                try {
                    @Model.ClientResponse()
                    return Observable.just(clientResponse);
                } catch (Throwable t) {
                    return Observable.error(t);
                }
            }
        });
}
@EmptyLine
private @Model.ReturnTypeModel.WireResponseTypeString @(Model.Name)Delegate(Response<@Model.CallType> response) throws @Model.ExceptionString {
    return new @Model.ResponseBuilder<@Model.ReturnTypeModel.GenericBodyWireTypeString, @Model.OperationExceptionTypeString>(@(Model.ClientReference).mapperAdapter())
@foreach (var response in Model.ResponseModels)
{

            @:.register(@((int)response.Key), new TypeToken<@response.Value.GenericBodyWireTypeString>() { }.getType())
}
@if (Model.DefaultResponse.Body != null)
{
            @:.registerError(@(Model.OperationExceptionTypeString).class)
}
@if (Model.HttpMethod == HttpMethod.Head)
{
    if (Model.ReturnType.Headers != null)
    {
            @:.buildEmptyWithHeaders(response, @(Model.ReturnType.Headers.Name).class);
    }
    else
    {
            @:.buildEmpty(response);
    }
}
else
{
    if (Model.ReturnType.Headers != null)
    {
            @:.buildWithHeaders(response, @(Model.ReturnType.Headers.Name).class);
    }
    else
    {
            @:.build(response);
    }
}
}