/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.paging.implementation;

import retrofit2.Retrofit;
import fixtures.paging.Pagings;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceCall;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import fixtures.paging.models.PageImpl;
import fixtures.paging.models.PageImpl1;
import fixtures.paging.models.PagingGetMultiplePagesOptions;
import fixtures.paging.models.PagingGetMultiplePagesWithOffsetNextOptions;
import fixtures.paging.models.PagingGetMultiplePagesWithOffsetOptions;
import fixtures.paging.models.PagingGetOdataMultiplePagesOptions;
import fixtures.paging.models.Product;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Pagings.
 */
public final class PagingsImpl implements Pagings {
    /** The Retrofit service to perform REST calls. */
    private PagingsService service;
    /** The service client containing this operation class. */
    private AutoRestPagingTestServiceImpl client;

    /**
     * Initializes an instance of PagingsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PagingsImpl(Retrofit retrofit, AutoRestPagingTestServiceImpl client) {
        this.service = retrofit.create(PagingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Pagings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PagingsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("paging/single")
        Observable<Response<ResponseBody>> getSinglePages(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("paging/multiple")
        Observable<Response<ResponseBody>> getMultiplePages(@Header("client-request-id") String clientRequestId, @Header("accept-language") String acceptLanguage, @Header("maxresults") Integer maxresults, @Header("timeout") Integer timeout, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("paging/multiple/odata")
        Observable<Response<ResponseBody>> getOdataMultiplePages(@Header("client-request-id") String clientRequestId, @Header("accept-language") String acceptLanguage, @Header("maxresults") Integer maxresults, @Header("timeout") Integer timeout, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("paging/multiple/withpath/{offset}")
        Observable<Response<ResponseBody>> getMultiplePagesWithOffset(@Path("offset") int offset, @Header("client-request-id") String clientRequestId, @Header("accept-language") String acceptLanguage, @Header("maxresults") Integer maxresults, @Header("timeout") Integer timeout, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("paging/multiple/retryfirst")
        Observable<Response<ResponseBody>> getMultiplePagesRetryFirst(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("paging/multiple/retrysecond")
        Observable<Response<ResponseBody>> getMultiplePagesRetrySecond(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("paging/single/failure")
        Observable<Response<ResponseBody>> getSinglePagesFailure(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("paging/multiple/failure")
        Observable<Response<ResponseBody>> getMultiplePagesFailure(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("paging/multiple/failureuri")
        Observable<Response<ResponseBody>> getMultiplePagesFailureUri(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getSinglePagesNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getMultiplePagesNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("client-request-id") String clientRequestId, @Header("accept-language") String acceptLanguage, @Header("maxresults") Integer maxresults, @Header("timeout") Integer timeout, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getOdataMultiplePagesNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("client-request-id") String clientRequestId, @Header("accept-language") String acceptLanguage, @Header("maxresults") Integer maxresults, @Header("timeout") Integer timeout, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getMultiplePagesWithOffsetNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("client-request-id") String clientRequestId, @Header("accept-language") String acceptLanguage, @Header("maxresults") Integer maxresults, @Header("timeout") Integer timeout, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getMultiplePagesRetryFirstNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getMultiplePagesRetrySecondNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getSinglePagesFailureNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getMultiplePagesFailureNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> getMultiplePagesFailureUriNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getSinglePages() throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getSinglePagesSinglePageAsync().toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getSinglePagesNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getSinglePagesAsync(final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getSinglePagesSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getSinglePagesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getSinglePagesAsync() {
        return getSinglePagesSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getSinglePagesNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getSinglePagesSinglePageAsync() {
        return service.getSinglePages(this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getSinglePagesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getSinglePagesDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePages() throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getMultiplePagesSinglePageAsync().toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesAsync(final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesAsync() {
        return getMultiplePagesSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesSinglePageAsync() {
        final String clientRequestId = null;
        final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        return service.getMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePages(final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getMultiplePagesSinglePageAsync(clientRequestId, pagingGetMultiplePagesOptions).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesAsync(final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesSinglePageAsync(clientRequestId, pagingGetMultiplePagesOptions),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesAsync(final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        return getMultiplePagesSinglePageAsync(clientRequestId, pagingGetMultiplePagesOptions)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
    ServiceResponse<PageImpl<Product>> * @param clientRequestId the String value
    ServiceResponse<PageImpl<Product>> * @param pagingGetMultiplePagesOptions Additional parameters for the operation
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesSinglePageAsync(final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        Validator.validate(pagingGetMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingGetMultiplePagesOptions != null) {
            maxresults = pagingGetMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetMultiplePagesOptions != null) {
            timeout = pagingGetMultiplePagesOptions.timeout();
        }
        return service.getMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getOdataMultiplePages() throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getOdataMultiplePagesSinglePageAsync().toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getOdataMultiplePagesAsync(final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getOdataMultiplePagesSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getOdataMultiplePagesAsync() {
        return getOdataMultiplePagesSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getOdataMultiplePagesSinglePageAsync() {
        final String clientRequestId = null;
        final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        return service.getOdataMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<Product>> result = getOdataMultiplePagesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getOdataMultiplePages(final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getOdataMultiplePagesSinglePageAsync(clientRequestId, pagingGetOdataMultiplePagesOptions).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getOdataMultiplePagesAsync(final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getOdataMultiplePagesSinglePageAsync(clientRequestId, pagingGetOdataMultiplePagesOptions),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getOdataMultiplePagesAsync(final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        return getOdataMultiplePagesSinglePageAsync(clientRequestId, pagingGetOdataMultiplePagesOptions)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
    ServiceResponse<PageImpl1<Product>> * @param clientRequestId the String value
    ServiceResponse<PageImpl1<Product>> * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getOdataMultiplePagesSinglePageAsync(final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        Validator.validate(pagingGetOdataMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingGetOdataMultiplePagesOptions != null) {
            maxresults = pagingGetOdataMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetOdataMultiplePagesOptions != null) {
            timeout = pagingGetOdataMultiplePagesOptions.timeout();
        }
        return service.getOdataMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<Product>> result = getOdataMultiplePagesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<Product>> getOdataMultiplePagesDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<PageImpl1<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesWithOffset(final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, pagingGetMultiplePagesWithOffsetNextOptions).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesWithOffsetAsync(final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                    pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                    pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                    return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, pagingGetMultiplePagesWithOffsetNextOptions);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesWithOffsetAsync(final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions) {
        return getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                    pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                    pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                    return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, pagingGetMultiplePagesWithOffsetNextOptions);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesWithOffsetSinglePageAsync(final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions) {
        if (pagingGetMultiplePagesWithOffsetOptions == null) {
            throw new IllegalArgumentException("Parameter pagingGetMultiplePagesWithOffsetOptions is required and cannot be null.");
        }
        Validator.validate(pagingGetMultiplePagesWithOffsetOptions);
        final String clientRequestId = null;
        Integer maxresults = pagingGetMultiplePagesWithOffsetOptions.maxresults();
        int offset = pagingGetMultiplePagesWithOffsetOptions.offset();
        Integer timeout = pagingGetMultiplePagesWithOffsetOptions.timeout();
        return service.getMultiplePagesWithOffset(offset, clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesWithOffsetDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
     * @param clientRequestId the String value
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesWithOffset(final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions, final String clientRequestId) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions, clientRequestId).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
     * @param clientRequestId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesWithOffsetAsync(final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions, final String clientRequestId, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions, clientRequestId),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                    pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                    pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                    return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
     * @param clientRequestId the String value
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesWithOffsetAsync(final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions, final String clientRequestId) {
        return getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions, clientRequestId)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                    pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                    pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                    return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
    ServiceResponse<PageImpl<Product>> * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation
    ServiceResponse<PageImpl<Product>> * @param clientRequestId the String value
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesWithOffsetSinglePageAsync(final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions, final String clientRequestId) {
        if (pagingGetMultiplePagesWithOffsetOptions == null) {
            throw new IllegalArgumentException("Parameter pagingGetMultiplePagesWithOffsetOptions is required and cannot be null.");
        }
        Validator.validate(pagingGetMultiplePagesWithOffsetOptions);
        Integer maxresults = pagingGetMultiplePagesWithOffsetOptions.maxresults();
        int offset = pagingGetMultiplePagesWithOffsetOptions.offset();
        Integer timeout = pagingGetMultiplePagesWithOffsetOptions.timeout();
        return service.getMultiplePagesWithOffset(offset, clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesWithOffsetDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesWithOffsetDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesRetryFirst() throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getMultiplePagesRetryFirstSinglePageAsync().toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesRetryFirstAsync(final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesRetryFirstSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesRetryFirstAsync() {
        return getMultiplePagesRetryFirstSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesRetryFirstSinglePageAsync() {
        return service.getMultiplePagesRetryFirst(this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesRetryFirstDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesRetryFirstDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesRetrySecond() throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getMultiplePagesRetrySecondSinglePageAsync().toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesRetrySecondAsync(final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesRetrySecondSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesRetrySecondAsync() {
        return getMultiplePagesRetrySecondSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesRetrySecondSinglePageAsync() {
        return service.getMultiplePagesRetrySecond(this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesRetrySecondDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesRetrySecondDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getSinglePagesFailure() throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getSinglePagesFailureSinglePageAsync().toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getSinglePagesFailureNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getSinglePagesFailureAsync(final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getSinglePagesFailureSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getSinglePagesFailureNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getSinglePagesFailureAsync() {
        return getSinglePagesFailureSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getSinglePagesFailureNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getSinglePagesFailureSinglePageAsync() {
        return service.getSinglePagesFailure(this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getSinglePagesFailureDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getSinglePagesFailureDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesFailure() throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getMultiplePagesFailureSinglePageAsync().toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesFailureNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesFailureAsync(final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesFailureSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesFailureNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesFailureAsync() {
        return getMultiplePagesFailureSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesFailureNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesFailureSinglePageAsync() {
        return service.getMultiplePagesFailure(this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesFailureDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesFailureDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesFailureUri() throws CloudException, IOException {
        ServiceResponse<Page<Product>> response = getMultiplePagesFailureUriSinglePageAsync().toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesFailureUriAsync(final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesFailureUriSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesFailureUriAsync() {
        return getMultiplePagesFailureUriSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesFailureUriSinglePageAsync() {
        return service.getMultiplePagesFailureUri(this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesFailureUriDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesFailureUriDelegate(Response<ResponseBody> response) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getSinglePagesNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getSinglePagesNextSinglePageAsync(nextPageLink).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getSinglePagesNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getSinglePagesNextAsync(final String nextPageLink, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getSinglePagesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getSinglePagesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getSinglePagesNextAsync(final String nextPageLink) {
        return getSinglePagesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getSinglePagesNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
    ServiceResponse<PageImpl<Product>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getSinglePagesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.getSinglePagesNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getSinglePagesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getSinglePagesNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesNextSinglePageAsync(nextPageLink).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesNextAsync(final String nextPageLink, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesNextAsync(final String nextPageLink) {
        return getMultiplePagesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String clientRequestId = null;
        final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        return service.getMultiplePagesNext(nextPageLink, clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesNext(final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesNextAsync(final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesNextAsync(final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
    ServiceResponse<PageImpl<Product>> * @param nextPageLink The NextLink from the previous successful call to List operation.
    ServiceResponse<PageImpl<Product>> * @param clientRequestId the String value
    ServiceResponse<PageImpl<Product>> * @param pagingGetMultiplePagesOptions Additional parameters for the operation
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesNextSinglePageAsync(final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        Validator.validate(pagingGetMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingGetMultiplePagesOptions != null) {
            maxresults = pagingGetMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetMultiplePagesOptions != null) {
            timeout = pagingGetMultiplePagesOptions.timeout();
        }
        return service.getMultiplePagesNext(nextPageLink, clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getOdataMultiplePagesNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getOdataMultiplePagesNextSinglePageAsync(nextPageLink).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getOdataMultiplePagesNextAsync(final String nextPageLink, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getOdataMultiplePagesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getOdataMultiplePagesNextAsync(final String nextPageLink) {
        return getOdataMultiplePagesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getOdataMultiplePagesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String clientRequestId = null;
        final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        return service.getOdataMultiplePagesNext(nextPageLink, clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<Product>> result = getOdataMultiplePagesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getOdataMultiplePagesNext(final String nextPageLink, final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getOdataMultiplePagesNextAsync(final String nextPageLink, final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getOdataMultiplePagesNextAsync(final String nextPageLink, final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
    ServiceResponse<PageImpl1<Product>> * @param nextPageLink The NextLink from the previous successful call to List operation.
    ServiceResponse<PageImpl1<Product>> * @param clientRequestId the String value
    ServiceResponse<PageImpl1<Product>> * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getOdataMultiplePagesNextSinglePageAsync(final String nextPageLink, final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        Validator.validate(pagingGetOdataMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingGetOdataMultiplePagesOptions != null) {
            maxresults = pagingGetOdataMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetOdataMultiplePagesOptions != null) {
            timeout = pagingGetOdataMultiplePagesOptions.timeout();
        }
        return service.getOdataMultiplePagesNext(nextPageLink, clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<Product>> result = getOdataMultiplePagesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<Product>> getOdataMultiplePagesNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl1<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl1<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesWithOffsetNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, null).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesWithOffsetNextAsync(final String nextPageLink, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, null);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesWithOffsetNextAsync(final String nextPageLink) {
        return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, null);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesWithOffsetNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String clientRequestId = null;
        final PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        return service.getMultiplePagesWithOffsetNext(nextPageLink, clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesWithOffsetNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value
     * @param pagingGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesWithOffsetNext(final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value
     * @param pagingGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesWithOffsetNextAsync(final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value
     * @param pagingGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesWithOffsetNextAsync(final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions) {
        return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
    ServiceResponse<PageImpl<Product>> * @param nextPageLink The NextLink from the previous successful call to List operation.
    ServiceResponse<PageImpl<Product>> * @param clientRequestId the String value
    ServiceResponse<PageImpl<Product>> * @param pagingGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesWithOffsetNextSinglePageAsync(final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        Validator.validate(pagingGetMultiplePagesWithOffsetNextOptions);
        Integer maxresults = null;
        if (pagingGetMultiplePagesWithOffsetNextOptions != null) {
            maxresults = pagingGetMultiplePagesWithOffsetNextOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetMultiplePagesWithOffsetNextOptions != null) {
            timeout = pagingGetMultiplePagesWithOffsetNextOptions.timeout();
        }
        return service.getMultiplePagesWithOffsetNext(nextPageLink, clientRequestId, this.client.acceptLanguage(), maxresults, timeout, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesWithOffsetNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesWithOffsetNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesRetryFirstNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesRetryFirstNextAsync(final String nextPageLink, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesRetryFirstNextAsync(final String nextPageLink) {
        return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
    ServiceResponse<PageImpl<Product>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesRetryFirstNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.getMultiplePagesRetryFirstNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesRetryFirstNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesRetryFirstNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesRetrySecondNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesRetrySecondNextAsync(final String nextPageLink, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesRetrySecondNextAsync(final String nextPageLink) {
        return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
    ServiceResponse<PageImpl<Product>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesRetrySecondNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.getMultiplePagesRetrySecondNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesRetrySecondNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesRetrySecondNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getSinglePagesFailureNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getSinglePagesFailureNextSinglePageAsync(nextPageLink).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getSinglePagesFailureNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getSinglePagesFailureNextAsync(final String nextPageLink, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getSinglePagesFailureNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getSinglePagesFailureNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getSinglePagesFailureNextAsync(final String nextPageLink) {
        return getSinglePagesFailureNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getSinglePagesFailureNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
    ServiceResponse<PageImpl<Product>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getSinglePagesFailureNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.getSinglePagesFailureNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getSinglePagesFailureNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getSinglePagesFailureNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesFailureNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesFailureNextSinglePageAsync(nextPageLink).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesFailureNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesFailureNextAsync(final String nextPageLink, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesFailureNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesFailureNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesFailureNextAsync(final String nextPageLink) {
        return getMultiplePagesFailureNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesFailureNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
    ServiceResponse<PageImpl<Product>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesFailureNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.getMultiplePagesFailureNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesFailureNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesFailureNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<PagedList<Product>> getMultiplePagesFailureUriNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException {
        ServiceResponse<Page<Product>> response = getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).toBlocking().single();
        PagedList<Product> pagedList = new PagedList<Product>(response.getBody()) {
            @Override
            public Page<Product> nextPage(String nextPageLink) throws RestException, IOException {
                return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
        return new ServiceResponse<PagedList<Product>>(pagedList, response.getResponse());
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<Product>> getMultiplePagesFailureUriNextAsync(final String nextPageLink, final ServiceCall<List<Product>> serviceCall, final ListOperationCallback<Product> serviceCallback) {
        return AzureServiceCall.create(
            getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(String nextPageLink) {
                    return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the List&lt;Product&gt; object
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesFailureUriNextAsync(final String nextPageLink) {
        return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<Product>>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(ServiceResponse<Page<Product>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink);
                }
            });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
    ServiceResponse<PageImpl<Product>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the List&lt;Product&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<Product>>> getMultiplePagesFailureUriNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.getMultiplePagesFailureUriNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<Product>>>>() {
                @Override
                public Observable<ServiceResponse<Page<Product>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<Product>> result = getMultiplePagesFailureUriNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<Product>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<Product>> getMultiplePagesFailureUriNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<Product>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<Product>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
