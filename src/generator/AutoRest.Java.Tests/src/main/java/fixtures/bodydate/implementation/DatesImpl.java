/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydate.implementation;

import retrofit2.Retrofit;
import fixtures.bodydate.Dates;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import fixtures.bodydate.models.ErrorException;
import java.io.IOException;
import okhttp3.ResponseBody;
import org.joda.time.LocalDate;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.PUT;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Dates.
 */
public final class DatesImpl implements Dates {
    /** The Retrofit service to perform REST calls. */
    private DatesService service;
    /** The service client containing this operation class. */
    private AutoRestDateTestServiceImpl client;

    /**
     * Initializes an instance of Dates.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DatesImpl(Retrofit retrofit, AutoRestDateTestServiceImpl client) {
        this.service = retrofit.create(DatesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Dates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DatesService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/null")
        Observable<Response<ResponseBody>> getNull();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/invaliddate")
        Observable<Response<ResponseBody>> getInvalidDate();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/overflowdate")
        Observable<Response<ResponseBody>> getOverflowDate();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/underflowdate")
        Observable<Response<ResponseBody>> getUnderflowDate();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("date/max")
        Observable<Response<ResponseBody>> putMaxDate(@Body LocalDate dateBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/max")
        Observable<Response<ResponseBody>> getMaxDate();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("date/min")
        Observable<Response<ResponseBody>> putMinDate(@Body LocalDate dateBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/min")
        Observable<Response<ResponseBody>> getMinDate();

    }

    /**
     * Get null date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<LocalDate> getNull() throws ErrorException, IOException {
        return getNullAsync().toBlocking().single();
    }

    /**
     * Get null date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<LocalDate> getNullAsync(final ServiceCallback<LocalDate> serviceCallback) {
        return ServiceCall.create(getNullAsync(), serviceCallback);
    }

    /**
     * Get null date value.
     *
     * @return the observable to the LocalDate object
     */
    public Observable<ServiceResponse<LocalDate>> getNullAsync() {
        return service.getNull()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LocalDate>>>() {
                @Override
                public Observable<ServiceResponse<LocalDate>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LocalDate> clientResponse = getNullDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LocalDate> getNullDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<LocalDate, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<LocalDate>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get invalid date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<LocalDate> getInvalidDate() throws ErrorException, IOException {
        return getInvalidDateAsync().toBlocking().single();
    }

    /**
     * Get invalid date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<LocalDate> getInvalidDateAsync(final ServiceCallback<LocalDate> serviceCallback) {
        return ServiceCall.create(getInvalidDateAsync(), serviceCallback);
    }

    /**
     * Get invalid date value.
     *
     * @return the observable to the LocalDate object
     */
    public Observable<ServiceResponse<LocalDate>> getInvalidDateAsync() {
        return service.getInvalidDate()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LocalDate>>>() {
                @Override
                public Observable<ServiceResponse<LocalDate>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LocalDate> clientResponse = getInvalidDateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LocalDate> getInvalidDateDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<LocalDate, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<LocalDate>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get overflow date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<LocalDate> getOverflowDate() throws ErrorException, IOException {
        return getOverflowDateAsync().toBlocking().single();
    }

    /**
     * Get overflow date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<LocalDate> getOverflowDateAsync(final ServiceCallback<LocalDate> serviceCallback) {
        return ServiceCall.create(getOverflowDateAsync(), serviceCallback);
    }

    /**
     * Get overflow date value.
     *
     * @return the observable to the LocalDate object
     */
    public Observable<ServiceResponse<LocalDate>> getOverflowDateAsync() {
        return service.getOverflowDate()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LocalDate>>>() {
                @Override
                public Observable<ServiceResponse<LocalDate>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LocalDate> clientResponse = getOverflowDateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LocalDate> getOverflowDateDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<LocalDate, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<LocalDate>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get underflow date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<LocalDate> getUnderflowDate() throws ErrorException, IOException {
        return getUnderflowDateAsync().toBlocking().single();
    }

    /**
     * Get underflow date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<LocalDate> getUnderflowDateAsync(final ServiceCallback<LocalDate> serviceCallback) {
        return ServiceCall.create(getUnderflowDateAsync(), serviceCallback);
    }

    /**
     * Get underflow date value.
     *
     * @return the observable to the LocalDate object
     */
    public Observable<ServiceResponse<LocalDate>> getUnderflowDateAsync() {
        return service.getUnderflowDate()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LocalDate>>>() {
                @Override
                public Observable<ServiceResponse<LocalDate>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LocalDate> clientResponse = getUnderflowDateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LocalDate> getUnderflowDateDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<LocalDate, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<LocalDate>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putMaxDate(LocalDate dateBody) throws ErrorException, IOException, IllegalArgumentException {
        return putMaxDateAsync(dateBody).toBlocking().single();
    }

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putMaxDateAsync(LocalDate dateBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putMaxDateAsync(dateBody), serviceCallback);
    }

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putMaxDateAsync(LocalDate dateBody) {
        if (dateBody == null) {
            throw new IllegalArgumentException("Parameter dateBody is required and cannot be null.");
        }
        return service.putMaxDate(dateBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putMaxDateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putMaxDateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get max date value 9999-12-31.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<LocalDate> getMaxDate() throws ErrorException, IOException {
        return getMaxDateAsync().toBlocking().single();
    }

    /**
     * Get max date value 9999-12-31.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<LocalDate> getMaxDateAsync(final ServiceCallback<LocalDate> serviceCallback) {
        return ServiceCall.create(getMaxDateAsync(), serviceCallback);
    }

    /**
     * Get max date value 9999-12-31.
     *
     * @return the observable to the LocalDate object
     */
    public Observable<ServiceResponse<LocalDate>> getMaxDateAsync() {
        return service.getMaxDate()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LocalDate>>>() {
                @Override
                public Observable<ServiceResponse<LocalDate>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LocalDate> clientResponse = getMaxDateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LocalDate> getMaxDateDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<LocalDate, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<LocalDate>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> putMinDate(LocalDate dateBody) throws ErrorException, IOException, IllegalArgumentException {
        return putMinDateAsync(dateBody).toBlocking().single();
    }

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putMinDateAsync(LocalDate dateBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putMinDateAsync(dateBody), serviceCallback);
    }

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putMinDateAsync(LocalDate dateBody) {
        if (dateBody == null) {
            throw new IllegalArgumentException("Parameter dateBody is required and cannot be null.");
        }
        return service.putMinDate(dateBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putMinDateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putMinDateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get min date value 0000-01-01.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<LocalDate> getMinDate() throws ErrorException, IOException {
        return getMinDateAsync().toBlocking().single();
    }

    /**
     * Get min date value 0000-01-01.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<LocalDate> getMinDateAsync(final ServiceCallback<LocalDate> serviceCallback) {
        return ServiceCall.create(getMinDateAsync(), serviceCallback);
    }

    /**
     * Get min date value 0000-01-01.
     *
     * @return the observable to the LocalDate object
     */
    public Observable<ServiceResponse<LocalDate>> getMinDateAsync() {
        return service.getMinDate()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LocalDate>>>() {
                @Override
                public Observable<ServiceResponse<LocalDate>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LocalDate> clientResponse = getMinDateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LocalDate> getMinDateDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<LocalDate, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<LocalDate>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
